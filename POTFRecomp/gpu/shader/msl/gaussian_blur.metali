#include "../../../../tools/XenosRecomp/XenosRecomp/shader_common.h"

#define g_ViewportSize (*(reinterpret_cast<device float4*>(g_PushConstants.PixelShaderConstants + 384)))
#define g_offsets(INDEX) selectWrapper((INDEX) < 74,(*(reinterpret_cast<device float4*>(g_PushConstants.PixelShaderConstants + (150 + min(INDEX, 73)) * 16))), 0.0)
#define g_weights (*(reinterpret_cast<device float4*>(g_PushConstants.PixelShaderConstants + 2656)))

#define s0_Texture2DDescriptorIndex (*(reinterpret_cast<device uint*>(g_PushConstants.SharedConstants + 0)))
#define s0_SamplerDescriptorIndex (*(reinterpret_cast<device uint*>(g_PushConstants.SharedConstants + 192)))

#ifdef __INTELLISENSE__
#define KERNEL_SIZE 5
#endif

#define PI 3.14159265358979323846

float ComputeWeight(float x)
{
    float std = 0.952;
    return exp(-(x * x) / (2.0 * std * std)) / (std * sqrt(2.0 * PI));
}

struct Interpolators
{
    float4 iTexCoord0 [[user(TEXCOORD0)]];
};

[[fragment]]
float4 shaderMain(float4 iPosition [[position]],
                  Interpolators input [[stage_in]],
                  constant Texture2DDescriptorHeap* g_Texture2DDescriptorHeap [[buffer(0)]],
                  constant SamplerDescriptorHeap* g_SamplerDescriptorHeap [[buffer(3)]],
                  constant PushConstants& g_PushConstants [[buffer(8)]])
{
    texture2d<float> texture = g_Texture2DDescriptorHeap[s0_Texture2DDescriptorIndex].tex;
    sampler samplerState = g_SamplerDescriptorHeap[s0_SamplerDescriptorIndex].samp;
    
    float scale;
    if ((g_ViewportSize.x * g_ViewportSize.w) >= (16.0 / 9.0))
        scale = g_ViewportSize.y / 360.0;
    else
        scale = g_ViewportSize.x / 640.0;
    
    float2 offsets[3];
    offsets[0] = g_offsets(0).xy * scale;
    offsets[1] = g_offsets(0).zw * scale;
    offsets[2] = g_offsets(1).xy * scale;
    
    float4 color = 0.0;
    float weightSum = 0.0;

    for (int i = 0; i < KERNEL_SIZE; i++)
    {
        float step = i / float(KERNEL_SIZE - 1);
        float scaled = step * 2;
        float2 offset = mix(offsets[int(scaled)], offsets[min(int(scaled) + 1, 2)], frac(scaled));
        float offsetScale = 1.0 / 0.75;
        float weight = ComputeWeight(mix(-offsetScale, offsetScale, step));
        color += texture.sample(samplerState, input.iTexCoord0.xy + offset, level(0)) * weight;
        weightSum += weight;
    }
    
    return color / weightSum;
}
